#!/bin/bash

DEFS_FILE=$SIDEDRAM_HOME/src/defs.h
COMPILE=1

IB_ENTRIES=64

DESIRED_STR="MIXED_SIM   0"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct MIXED_SIM, not replacing..."
else
    SED_CMD='s/MIXED_SIM   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change MIXED_SIM"
        exit 1
    fi

    echo $SED_CMD
fi

DESIRED_STR="RECORDING   0"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct RECORDING, not replacing..."
else
    SED_CMD='s/RECORDING   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change RECORDING"
        exit 1
    fi

    echo $SED_CMD
fi

DESIRED_STR="EN_MODEL    1"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct EN_MODEL, not replacing..."
else
    SED_CMD='s/EN_MODEL    [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change EN_MODEL"
        exit 1
    fi

    echo $SED_CMD
fi

DESIRED_STR="VCD_TRACE   0"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct VCD_TRACE, not replacing..."
else
    SED_CMD='s/VCD_TRACE   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change VCD_TRACE"
        exit 1
    fi

    echo $SED_CMD
fi

DESIRED_STR="DEBUG       0"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct DEBUG, not replacing..."
else
    SED_CMD='s/DEBUG       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change DEBUG"
        exit 1
    fi

    echo $SED_CMD
fi

DESIRED_STR="INSTR_FORMAT    BASE_FORMAT"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct INSTR_FORMAT, not replacing..."
else
    SED_CMD='s/INSTR_FORMAT    [A-Z_]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change INSTR_FORMAT"
        exit 1
    fi

    echo $SED_CMD
fi

DESIRED_STR="IB_ENTRIES      "$IB_ENTRIES
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct IB_ENTRIES, not replacing..."
else
    SED_CMD='s/IB_ENTRIES      [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change IB_ENTRIES"
        exit 1
    fi

    echo $SED_CMD
fi

CSD_ENTRIES=$((IB_ENTRIES / 2))
DESIRED_STR="CSD_ENTRIES     "$CSD_ENTRIES
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "Cached: defs.h already contains the correct CSD_ENTRIES, not replacing..."
else
    SED_CMD='s/CSD_ENTRIES     [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h ..."

    if ! sed -i -E "$SED_CMD" $DEFS_FILE ; then
        echo "Couldn't edit defs.h to change CSD_ENTRIES"
        exit 1
    fi

    echo $SED_CMD
fi

if [ $COMPILE -eq 1 ]; then

DESIRED_STR="CORES_PER_PCH   2"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct CORES_PER_PCH, not replacing..."
else
    SED_CMD='s/CORES_PER_PCH   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change CORES_PER_PCH"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="VWR_BITS        8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct VWR_BITS, not replacing..."
else
    SED_CMD='s/VWR_BITS        [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change VWR_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="DRAM_BITS       8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct DRAM_BITS, not replacing..."
else
    SED_CMD='s/DRAM_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change DRAM_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="WORD_BITS       1536"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct WORD_BITS, not replacing..."
else
    SED_CMD='s/WORD_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change WORD_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

# Compile everything for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2
cd $INPUTS_DIR/
./compile_all_conf.sh 2 64 8192 1536 &
make -C $SIDEDRAM_HOME/Debug/ all -j32
mv $SIDEDRAM_HOME/Debug/pim-cores $SIDEDRAM_HOME/Debug/pim-cores_PU2_IB64_VWR8192_WORD1536
wait

DESIRED_STR="CORES_PER_PCH   4"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct CORES_PER_PCH, not replacing..."
else
    SED_CMD='s/CORES_PER_PCH   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change CORES_PER_PCH"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="VWR_BITS        2048"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct VWR_BITS, not replacing..."
else
    SED_CMD='s/VWR_BITS        [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change VWR_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="DRAM_BITS       2048"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct DRAM_BITS, not replacing..."
else
    SED_CMD='s/DRAM_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change DRAM_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="WORD_BITS       768"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct WORD_BITS, not replacing..."
else
    SED_CMD='s/WORD_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change WORD_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

# Compile everything for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4
cd $INPUTS_DIR/
./compile_all_conf.sh 4 64 2048 768 &
make -C $SIDEDRAM_HOME/Debug/ all -j32
mv $SIDEDRAM_HOME/Debug/pim-cores $SIDEDRAM_HOME/Debug/pim-cores_PU4_IB64_VWR2048_WORD768
wait

DESIRED_STR="CORES_PER_PCH   4"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct CORES_PER_PCH, not replacing..."
else
    SED_CMD='s/CORES_PER_PCH   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change CORES_PER_PCH"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="VWR_BITS        2048"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct VWR_BITS, not replacing..."
else
    SED_CMD='s/VWR_BITS        [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change VWR_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="DRAM_BITS       2048"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct DRAM_BITS, not replacing..."
else
    SED_CMD='s/DRAM_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change DRAM_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="WORD_BITS       384"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct WORD_BITS, not replacing..."
else
    SED_CMD='s/WORD_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change WORD_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

# Compile everything for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4
cd $INPUTS_DIR/
./compile_all_conf.sh 4 64 2048 384 &
make -C $SIDEDRAM_HOME/Debug/ all -j32
mv $SIDEDRAM_HOME/Debug/pim-cores $SIDEDRAM_HOME/Debug/pim-cores_PU4_IB64_VWR2048_WORD384
wait

DESIRED_STR="CORES_PER_PCH   4"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct CORES_PER_PCH, not replacing..."
else
    SED_CMD='s/CORES_PER_PCH   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change CORES_PER_PCH"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="VWR_BITS        8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct VWR_BITS, not replacing..."
else
    SED_CMD='s/VWR_BITS        [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change VWR_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="DRAM_BITS       8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct DRAM_BITS, not replacing..."
else
    SED_CMD='s/DRAM_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change DRAM_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="WORD_BITS       768"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct WORD_BITS, not replacing..."
else
    SED_CMD='s/WORD_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change WORD_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

# Compile everything for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4
cd $INPUTS_DIR/
./compile_all_conf.sh 4 64 8192 768 &
make -C $SIDEDRAM_HOME/Debug/ all -j32
mv $SIDEDRAM_HOME/Debug/pim-cores $SIDEDRAM_HOME/Debug/pim-cores_PU4_IB64_VWR8192_WORD768
wait

DESIRED_STR="CORES_PER_PCH   8"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct CORES_PER_PCH, not replacing..."
else
    SED_CMD='s/CORES_PER_PCH   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change CORES_PER_PCH"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="VWR_BITS        2048"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct VWR_BITS, not replacing..."
else
    SED_CMD='s/VWR_BITS        [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change VWR_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="DRAM_BITS       2048"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct DRAM_BITS, not replacing..."
else
    SED_CMD='s/DRAM_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change DRAM_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="WORD_BITS       768"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct WORD_BITS, not replacing..."
else
    SED_CMD='s/WORD_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change WORD_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

# Compile everything for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8
cd $INPUTS_DIR/
./compile_all_conf.sh 8 64 2048 768 &
make -C $SIDEDRAM_HOME/Debug/ all -j32
mv $SIDEDRAM_HOME/Debug/pim-cores $SIDEDRAM_HOME/Debug/pim-cores_PU8_IB64_VWR2048_WORD768
wait

DESIRED_STR="CORES_PER_PCH   4"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct CORES_PER_PCH, not replacing..."
else
    SED_CMD='s/CORES_PER_PCH   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change CORES_PER_PCH"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="VWR_BITS        8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct VWR_BITS, not replacing..."
else
    SED_CMD='s/VWR_BITS        [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change VWR_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="DRAM_BITS       8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct DRAM_BITS, not replacing..."
else
    SED_CMD='s/DRAM_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change DRAM_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="WORD_BITS       1536"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct WORD_BITS, not replacing..."
else
    SED_CMD='s/WORD_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change WORD_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

# Compile everything for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4
cd $INPUTS_DIR/
./compile_all_conf.sh 4 64 8192 1536 &
make -C $SIDEDRAM_HOME/Debug/ all -j32
mv $SIDEDRAM_HOME/Debug/pim-cores $SIDEDRAM_HOME/Debug/pim-cores_PU4_IB64_VWR8192_WORD1536
wait

DESIRED_STR="CORES_PER_PCH   8"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct CORES_PER_PCH, not replacing..."
else
    SED_CMD='s/CORES_PER_PCH   [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change CORES_PER_PCH"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="VWR_BITS        8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct VWR_BITS, not replacing..."
else
    SED_CMD='s/VWR_BITS        [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change VWR_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="DRAM_BITS       8192"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct DRAM_BITS, not replacing..."
else
    SED_CMD='s/DRAM_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change DRAM_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

DESIRED_STR="WORD_BITS       1536"
if grep -q -E "$DESIRED_STR" $DEFS_FILE; then
    echo "defs.h already contains the correct WORD_BITS, not replacing..."
else
    SED_CMD='s/WORD_BITS       [0123456789]+/'$DESIRED_STR'/'
    echo "Editing defs.h..."
    if ! sed -i -E "$SED_CMD" $DEFS_FILE; then
        echo "Couldn't edit defs.h to change WORD_BITS"
        exit 1
    fi
    echo $SED_CMD
fi

# Compile everything for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8
cd $INPUTS_DIR/
./compile_all_conf.sh 8 64 8192 1536 &
make -C $SIDEDRAM_HOME/Debug/ all -j32
mv $SIDEDRAM_HOME/Debug/pim-cores $SIDEDRAM_HOME/Debug/pim-cores_PU8_IB64_VWR8192_WORD1536
wait

fi

cd $INPUTS_DIR/

MAX_JOBS=60
NICENESS=5

renice -n $NICENESS $$

wait-n ()
{ StartJobs="$(jobs -p)"
  CurJobs="(jobs -p)"
  while diff -q <(echo -e "$StartJobs") <(echo -e "$CurJobs") >/dev/null
  do
    sleep 1
    CurJobs="$(jobs -p)"
  done
}

# Check if $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv exists
if [ -f "$SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv" ]; then
    echo "Cached: $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv already exists, not replacing..."
else
    echo "Creating $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv..."
    echo "NUM_PU,VWR_BITS,WORD_BITS,IB_ENTRIES,M,N,Q,ACT_BW,WEIGHT_BW,CYCLES" > $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
fi

# Check if $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv exists
if [ -f "$SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv" ]; then
    echo "Cached: $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv already exists, not replacing..."
else
    echo "Creating $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv..."
    echo "NUM_PU,VWR_BITS,WORD_BITS,IB_ENTRIES,M,N,Q,ACT_BW,WEIGHT_BW,CYCLES" > $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
fi

# Check if $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv exists
if [ -f "$SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv" ]; then
    echo "Cached: $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv already exists, not replacing..."
else
    echo "Creating $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv..."
    echo "NUM_PU,VWR_BITS,WORD_BITS,IB_ENTRIES,M,N,Q,ACT_BW,WEIGHT_BW,CYCLES" > $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
fi

# Check if $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv exists
if [ -f "$SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv" ]; then
    echo "Cached: $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv already exists, not replacing..."
else
    echo "Creating $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv..."
    echo "NUM_PU,VWR_BITS,WORD_BITS,IB_ENTRIES,M,N,Q,ACT_BW,WEIGHT_BW,CYCLES" > $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
fi

# Check if $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv exists
if [ -f "$SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv" ]; then
    echo "Cached: $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv already exists, not replacing..."
else
    echo "Creating $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv..."
    echo "NUM_PU,VWR_BITS,WORD_BITS,IB_ENTRIES,M,N,Q,ACT_BW,WEIGHT_BW,CYCLES" > $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
fi

# Check if $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv exists
if [ -f "$SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv" ]; then
    echo "Cached: $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv already exists, not replacing..."
else
    echo "Creating $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv..."
    echo "NUM_PU,VWR_BITS,WORD_BITS,IB_ENTRIES,M,N,Q,ACT_BW,WEIGHT_BW,CYCLES" > $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
fi

# Check if $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv exists
if [ -f "$SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv" ]; then
    echo "Cached: $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv already exists, not replacing..."
else
    echo "Creating $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv..."
    echo "NUM_PU,VWR_BITS,WORD_BITS,IB_ENTRIES,M,N,Q,ACT_BW,WEIGHT_BW,CYCLES" > $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
fi


# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,4,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,4,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=4 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=4 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,4,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=4 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=4 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,4,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,4,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,4,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,4,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,16,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,16,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=16 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=16 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,16,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=16 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=16 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,16,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,16,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,16,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,16,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,4,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,4,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=4 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=4 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,4,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=4 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=4 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,4,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,4,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,4,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,4,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=1 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=1 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q1_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1000,1,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=1 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=1 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1000,1,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1000 q=1 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1000 --q=1 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1000,1,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1000 q=1 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1000 --q=1 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1000,1,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=1 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=1 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1000,1,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=1 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=1 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1000,1,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=1 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=1 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1000,1,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q4_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=4 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=4 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q4_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q4_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1000,4,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q4_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=4 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=4 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1000,4,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1000 q=4 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1000 --q=4 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1000,4,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1000 q=4 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1000 --q=4 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1000,4,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=4 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=4 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1000,4,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=4 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=4 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1000,4,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q4_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=4 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=4 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1000,4,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q4_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1000,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1000,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1000 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1000 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1000,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1000 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1000 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1000,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1000,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1000,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1000,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1000,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1000,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1000 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1000 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1000,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1000 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1000 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1000,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1000,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1000,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1000,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1000,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1000,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1000 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1000 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1000,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1000 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1000 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1000,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1000,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1000,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1000,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1000,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1000,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1000 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1000 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1000,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1000 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1000 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1000,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1000 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1000 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1000,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1000,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1000 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1000 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1000,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1000_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q900_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=900 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=900 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q900_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q900_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,900,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q900_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=900 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=900 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,900,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=900 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=900 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,900,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=900 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=900 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,900,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=900 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=900 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,900,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=900 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=900 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,900,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q900_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=900 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=900 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,900,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q900_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q3600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=3600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=3600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q3600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q3600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,3600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q3600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=3600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=3600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,3600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=3600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=3600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,3600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=3600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=3600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,3600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=3600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=3600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,3600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=3600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=3600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,3600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q3600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=3600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=3600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,3600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q3600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q14400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=14400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=14400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q14400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q14400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,14400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q14400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=14400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=14400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,14400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=14400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=14400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,14400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=14400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=14400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,14400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=14400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=14400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,14400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=14400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=14400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,14400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q14400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=14400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=14400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,14400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q14400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=784 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=784 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,784,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=784 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=784 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,784,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=784 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=784 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,784,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=784 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=784 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,784,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=784 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=784 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,784,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=784 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=784 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,784,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=784 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=784 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,784,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=3136 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=3136 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,3136,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=3136 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=3136 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,3136,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=3136 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=3136 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,3136,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=3136 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=3136 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,3136,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=3136 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=3136 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,3136,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=3136 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=3136 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,3136,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=3136 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=3136 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,3136,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=12544 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=12544 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,12544,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=12544 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=12544 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,12544,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=12544 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=12544 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,12544,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=12544 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=12544 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,12544,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=12544 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=12544 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,12544,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=12544 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=12544 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,12544,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=12544 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=12544 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,12544,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q676_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=676 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=676 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q676_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q676_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,676,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q676_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=676 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=676 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,676,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=676 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=676 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,676,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=676 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=676 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,676,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=676 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=676 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,676,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=676 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=676 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,676,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q676_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=676 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=676 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,676,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q676_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2704_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2704 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2704 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2704_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2704_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,2704,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2704_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2704 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2704 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,2704,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=2704 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=2704 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,2704,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=2704 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=2704 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,2704,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2704 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2704 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,2704,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2704 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2704 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,2704,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2704_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2704 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2704 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,2704,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2704_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q10816_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=10816 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=10816 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q10816_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q10816_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,10816,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q10816_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=10816 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=10816 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,10816,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=10816 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=10816 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,10816,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=10816 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=10816 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,10816,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=10816 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=10816 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,10816,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=10816 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=10816 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,10816,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q10816_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=10816 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=10816 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,10816,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q10816_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q676_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=676 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=676 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q676_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q676_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,676,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q676_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=676 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=676 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,676,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=676 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=676 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,676,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=676 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=676 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,676,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=676 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=676 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,676,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=676 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=676 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,676,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q676_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=676 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=676 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,676,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q676_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2704_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=2704 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=2704 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q2704_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q2704_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,2704,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2704_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=2704 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=2704 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,2704,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=2704 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=2704 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,2704,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=2704 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=2704 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,2704,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=2704 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=2704 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,2704,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=2704 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=2704 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,2704,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2704_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=2704 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=2704 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,2704,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2704_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q10816_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=10816 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=10816 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q10816_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q10816_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,10816,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q10816_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=10816 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=10816 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,10816,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=10816 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=10816 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,10816,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=10816 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=10816 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,10816,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=10816 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=10816 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,10816,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=10816 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=10816 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,10816,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q10816_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=10816 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=10816 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,10816,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q10816_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,576,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=576 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=576 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,576,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=576 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=576 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,576,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=576 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=576 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,576,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=576 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=576 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,576,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,576,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,576,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,2304,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2304 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2304 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,2304,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=2304 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=2304 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,2304,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=2304 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=2304 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,2304,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2304 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2304 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,2304,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,2304,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,2304,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,9216,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=9216 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=9216 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,9216,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=9216 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=9216 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,9216,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=9216 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=9216 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,9216,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=9216 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=9216 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,9216,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,9216,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,9216,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q484_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=484 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=484 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q484_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q484_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,484,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q484_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=484 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=484 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,484,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=484 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=484 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,484,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=484 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=484 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,484,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=484 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=484 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,484,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=484 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=484 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,484,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q484_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=484 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=484 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,484,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q484_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1936_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1936 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1936 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1936_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1936_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,1936,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1936_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1936 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1936 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,1936,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=1936 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=1936 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,1936,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=1936 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=1936 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,1936,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1936 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1936 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,1936,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1936 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1936 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,1936,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1936_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1936 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1936 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,1936,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1936_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q7744_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=7744 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=7744 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q7744_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q7744_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,7744,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q7744_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=7744 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=7744 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,7744,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=7744 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=7744 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,7744,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=7744 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=7744 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,7744,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=7744 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=7744 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,7744,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=7744 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=7744 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,7744,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q7744_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=7744 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=7744 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,7744,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q7744_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q30976_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=30976 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=30976 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q30976_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q30976_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,30976,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q30976_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=30976 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=30976 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,30976,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=30976 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=30976 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,30976,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=30976 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=30976 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,30976,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=30976 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=30976 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,30976,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=30976 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=30976 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,30976,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q30976_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=30976 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=30976 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,30976,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q30976_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q484_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=484 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=484 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q484_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q484_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,484,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q484_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=484 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=484 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,484,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=484 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=484 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,484,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=484 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=484 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,484,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=484 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=484 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,484,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=484 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=484 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,484,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q484_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=484 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=484 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,484,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q484_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1936_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1936 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1936 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1936_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1936_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,1936,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1936_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1936 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1936 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,1936,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=1936 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=1936 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,1936,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=1936 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=1936 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,1936,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1936 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1936 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,1936,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1936 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1936 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,1936,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1936_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1936 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1936 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,1936,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1936_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q7744_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=7744 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=7744 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q7744_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q7744_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,7744,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q7744_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=7744 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=7744 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,7744,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=7744 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=7744 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,7744,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=7744 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=7744 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,7744,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=7744 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=7744 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,7744,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=7744 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=7744 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,7744,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q7744_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=7744 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=7744 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,7744,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q7744_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q30976_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=30976 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=30976 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q30976_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q30976_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,30976,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q30976_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=30976 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=30976 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,30976,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=30976 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=30976 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,30976,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=30976 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=30976 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,30976,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=30976 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=30976 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,30976,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=30976 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=30976 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,30976,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q30976_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=30976 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=30976 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,30976,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q30976_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,1600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,1600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=1600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=1600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,1600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=1600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=1600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,1600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,1600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,1600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,1600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=6400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=6400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,6400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=6400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=6400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,6400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=6400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=6400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,6400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=6400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=6400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,6400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=6400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=6400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,6400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=6400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=6400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,6400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=6400 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=6400 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,6400,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=25600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=25600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,25600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=25600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=25600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,25600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=25600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=25600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,25600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=25600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=25600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,25600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=25600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=25600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,25600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=25600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=25600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,25600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=25600 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=25600 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,25600,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q6400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=6400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=6400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q6400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q6400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,6400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q6400_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=6400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=6400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,6400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=6400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=6400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,6400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=6400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=6400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,6400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=6400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=6400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,6400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=6400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=6400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,6400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q6400_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=6400 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=6400 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,6400,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q6400_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q25600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=25600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=25600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q25600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q25600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,25600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q25600_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=25600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=25600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,25600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=25600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=25600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,25600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=25600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=25600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,25600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=25600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=25600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,25600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=25600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=25600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,25600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q25600_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=25600 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=25600 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,25600,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q25600_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q324_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=324 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=324 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q324_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q324_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,324,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q324_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=324 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=324 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,324,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=324 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=324 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,324,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=324 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=324 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,324,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=324 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=324 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,324,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=324 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=324 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,324,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q324_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=324 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=324 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,324,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q324_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1296_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1296 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1296 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1296_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1296_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,1296,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1296_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1296 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1296 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,1296,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=1296 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=1296 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,1296,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=1296 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=1296 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,1296,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1296 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1296 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,1296,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1296 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1296 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,1296,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1296_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1296 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1296 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,1296,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1296_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q5184_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=5184 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=5184 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q5184_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q5184_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,5184,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q5184_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=5184 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=5184 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,5184,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=5184 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=5184 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,5184,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=5184 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=5184 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,5184,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=5184 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=5184 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,5184,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=5184 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=5184 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,5184,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q5184_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=5184 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=5184 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,5184,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q5184_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q20736_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=20736 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=20736 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q20736_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q20736_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,20736,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q20736_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=20736 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=20736 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,20736,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=20736 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=20736 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,20736,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=20736 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=20736 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,20736,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=20736 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=20736 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,20736,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=20736 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=20736 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,20736,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q20736_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=20736 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=20736 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,20736,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q20736_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q324_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=324 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=324 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q324_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q324_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,324,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q324_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=324 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=324 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,324,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=324 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=324 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,324,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=324 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=324 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,324,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=324 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=324 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,324,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=324 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=324 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,324,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q324_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=324 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=324 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,324,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q324_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1296_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1296 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1296 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1296_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1296_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1296,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1296_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1296 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1296 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1296,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1296 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1296 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1296,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1296 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1296 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1296,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1296 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1296 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1296,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1296 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1296 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1296,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1296_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1296 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1296 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1296,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1296_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q5184_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=5184 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=5184 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q5184_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q5184_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,5184,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q5184_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=5184 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=5184 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,5184,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=5184 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=5184 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,5184,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=5184 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=5184 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,5184,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=5184 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=5184 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,5184,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=5184 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=5184 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,5184,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q5184_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=5184 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=5184 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,5184,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q5184_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q20736_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=20736 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=20736 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q20736_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q20736_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,20736,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q20736_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=20736 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=20736 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,20736,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=20736 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=20736 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,20736,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=20736 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=20736 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,20736,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=20736 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=20736 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,20736,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=20736 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=20736 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,20736,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q20736_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=20736 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=20736 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,20736,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q20736_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q196_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=196 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=196 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q196_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q196_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,196,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q196_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=196 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=196 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,196,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=196 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=196 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,196,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=196 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=196 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,196,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=196 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=196 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,196,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=196 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=196 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,196,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q196_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=196 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=196 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,196,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q196_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=784 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=784 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,784,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q784_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=3136 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=3136 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,3136,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q3136_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=12544 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=12544 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,12544,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q12544_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q196_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=196 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=196 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q196_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q196_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,196,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q196_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=196 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=196 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,196,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=196 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=196 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,196,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=196 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=196 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,196,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=196 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=196 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,196,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=196 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=196 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,196,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q196_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=196 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=196 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,196,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q196_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q784_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=784 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=784 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q784_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q784_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,784,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q784_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=784 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=784 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,784,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=784 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=784 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,784,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=784 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=784 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,784,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=784 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=784 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,784,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=784 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=784 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,784,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q784_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=784 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=784 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,784,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q784_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q3136_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=3136 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=3136 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q3136_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q3136_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,3136,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q3136_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=3136 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=3136 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,3136,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=3136 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=3136 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,3136,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=3136 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=3136 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,3136,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=3136 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=3136 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,3136,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=3136 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=3136 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,3136,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q3136_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=3136 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=3136 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,3136,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q3136_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q12544_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=12544 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=12544 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q12544_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q12544_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,12544,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q12544_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=12544 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=12544 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,12544,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=12544 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=12544 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,12544,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=12544 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=12544 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,12544,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=12544 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=12544 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,12544,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=12544 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=12544 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,12544,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q12544_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=12544 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=12544 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,12544,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q12544_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=144 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=144 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,144,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=144 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=144 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,144,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=144 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=144 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,144,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=144 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=144 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,144,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=144 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=144 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,144,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=144 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=144 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,144,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=144 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=144 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,144,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,576,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=576 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=576 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,576,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=576 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=576 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,576,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=576 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=576 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,576,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=576 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=576 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,576,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,576,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,576,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,2304,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2304 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2304 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,2304,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=2304 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=2304 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,2304,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=2304 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=2304 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,2304,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2304 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2304 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,2304,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,2304,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,2304,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,9216,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=9216 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=9216 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,9216,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=9216 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=9216 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,9216,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=9216 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=9216 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,9216,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=9216 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=9216 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,9216,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,9216,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,9216,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q100_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=100 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=100 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q100_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q100_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,100,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q100_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=100 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=100 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,100,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=100 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=100 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,100,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=100 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=100 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,100,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=100 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=100 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,100,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=100 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=100 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,100,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q100_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=100 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=100 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,100,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q100_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,1600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,1600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=1600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=1600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,1600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=1600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=1600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,1600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,1600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,1600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,1600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=6400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=6400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,6400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=6400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=6400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,6400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=6400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=6400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,6400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=6400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=6400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,6400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=6400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=6400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,6400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=6400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=6400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,6400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=6400 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=6400 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,6400,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q6400_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=25600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=25600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,25600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=25600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=25600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,25600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=25600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=25600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,25600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=25600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=25600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,25600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=25600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=25600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,25600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=25600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=25600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,25600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=25600 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=25600 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,25600,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q25600_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q100_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=100 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=100 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q100_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q100_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,100,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q100_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=100 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=100 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,100,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=100 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=100 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,100,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=100 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=100 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,100,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=100 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=100 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,100,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=100 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=100 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,100,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q100_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=100 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=100 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,100,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q100_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,1600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,1600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=1600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=1600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,1600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=1600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=1600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,1600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,1600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,1600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,1600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q6400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=6400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=6400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q6400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q6400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,6400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q6400_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=6400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=6400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,6400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=6400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=6400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,6400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=6400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=6400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,6400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=6400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=6400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,6400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=6400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=6400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,6400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q6400_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=6400 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=6400 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,6400,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q6400_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q25600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=25600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=25600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q25600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q25600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,25600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q25600_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=25600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=25600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,25600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=25600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=25600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,25600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=25600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=25600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,25600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=25600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=25600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,25600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=25600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=25600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,25600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q25600_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=25600 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=25600 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,25600,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q25600_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=144 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=144 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,144,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q144_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=576 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=576 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,576,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q576_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=2304 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=2304 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,2304,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q2304_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=9216 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=9216 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,9216,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q9216_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q36_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q36_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=36 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=36 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,36,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q36_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,1,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,1,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=1 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=1 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,1,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=1 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=1 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,1,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,1,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,1,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,1,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,4,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,4,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=4 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=4 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,4,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=4 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=4 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,4,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,4,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,4,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,4,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,1024,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,1024,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,1024,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,1024,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,1024,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,1024,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,1024,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,4096,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,4096,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,4096,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,4096,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,4096,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,4096,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,4096,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,16384,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,16384,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,16384,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,16384,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,16384,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,16384,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,16384,3,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,1024,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,1024,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,1024,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,1024,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,1024,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,1024,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,1024,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,4096,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,4096,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,4096,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,4096,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,4096,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,4096,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,4096,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,16384,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,16384,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,16384,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,16384,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,16384,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,16384,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,16384,3,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,144,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,144,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,144,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,144,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,144,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,144,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=144 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=144 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,144,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n144_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,16,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=16 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,16,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=16 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=16 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,16,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=16 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=16 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,16,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=16 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,16,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,16,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,16,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,16,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=16 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,16,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=16 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=16 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,16,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=16 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=16 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,16,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=16 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,16,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,16,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,16,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,16,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=16 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,16,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=16 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=16 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,16,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=16 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=16 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,16,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=16 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,16,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,16,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,16,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,16,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=16 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,16,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=16 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=16 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,16,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=16 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=16 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,16,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=16 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=16 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,16,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,16,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=16 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=16 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,16,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n16_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,256,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,256,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,256,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,256,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,256,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,256,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,256,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,1024,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,4096,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,16384,3,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,256,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,256,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,256,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,256,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,256,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,256,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,256,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,1024,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,1024,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,1024,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,1024,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,1024,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,1024,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,1024,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,4096,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,4096,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,4096,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,4096,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,4096,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,4096,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,4096,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,16384,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,16384,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,16384,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,16384,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,16384,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,16384,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=3 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=3 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,16384,3,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw3_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,288,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=288 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,288,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=288 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=288 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,288,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=288 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=288 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,288,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=288 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=288 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,288,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,288,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=288 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=288 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,288,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n288_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q64_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q64_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=64 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=64 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,64,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q64_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,32,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=32 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,32,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=32 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=32 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,32,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=32 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=32 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,32,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=32 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=32 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,32,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,32,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=32 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=32 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,32,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n32_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,576,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,576,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=576 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=576 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,576,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=576 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=576 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,576,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=576 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=576 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,576,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,576,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=576 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=576 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,576,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n576_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,16,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=64 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=64 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,64,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,1,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,1,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=1 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=1 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,1,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=1 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=1 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,1,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,1,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,1,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,1,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q4_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,4,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=4 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=4 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,4,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=4 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=4 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,4,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=4 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=4 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,4,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=4 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=4 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,4,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,4,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,4,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,16,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,16,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=16 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=16 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,16,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=16 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=16 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,16,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,16,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,16,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,16,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,27,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=27 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,27,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=27 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=27 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,27,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=27 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=27 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,27,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=27 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=27 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,27,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,27,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=27 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=27 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,27,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n27_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1152,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1152,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1152 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1152 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1152,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1152 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1152,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1152 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1152 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1152,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1152,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1152 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1152 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1152,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1152_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,128,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,128,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,128,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,128,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,128,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,128,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=128 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=128 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,128,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n128_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,1024,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,4096,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,16384,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,256,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=256 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=256 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,256,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q256_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=1024 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=1024 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,1024,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q1024_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=4096 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=4096 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,4096,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q4096_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2304,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2304,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2304 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2304 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2304,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2304 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2304,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2304 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2304 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2304,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2304,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2304 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2304 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2304,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2304_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,256,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,256,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=256 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=256 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,256,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=256 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=256 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,256,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,256,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,256,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,256,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw12_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw12_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=12 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=12 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,12,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw12_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw3_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw3_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=3 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=3 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,16384,3,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw3_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,64,16,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,256,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,1024,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,4096,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16384,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=16 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=16 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,64,16,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw16_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,4608,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,4608,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,4608,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,4608,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,4608,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,4608,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=4608 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=4608 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,4608,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n4608_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,16,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,64,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,256,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,1024,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4096 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4096 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,4096,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw8_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw8_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16384 act_bw=8 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16384 --sw_bw=8 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,16384,8,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw8_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,16,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,16,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,16,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,16,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,16,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,16,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,16,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,64,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,256,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,1024,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,4096,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,16384,4,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,16,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,16,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,16,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,16,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,16,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,16,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,16,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,64,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,256,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,1024,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4096 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4096 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,4096,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4096_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw6_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw6_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16384 act_bw=6 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16384 --sw_bw=6 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,16384,6,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16384_actbw6_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,16,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=64 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=64 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,64,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q64_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=256 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=256 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,256,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q256_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=1024 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=1024 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,1024,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q1024_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=4096 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=4096 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,4096,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q4096_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,9216,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,9216,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,9216,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,9216,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,9216,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,9216,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=9216 q=16384 act_bw=4 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=9216 --q=16384 --sw_bw=4 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,9216,16384,4,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n9216_q16384_actbw4_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=64 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=64 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,64,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q64_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,1024,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,1024,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,1024,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,1024,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,1024,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,1024,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=1024 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=1024 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,1024,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n1024_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,1,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=4 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=4 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,4,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q4_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=16 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=16 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,16,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q16_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=64 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=64 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,64,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q64_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=256 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=256 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,256,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q256_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,2048,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,2048,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,2048,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,2048,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,2048,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,2048,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=2048 q=1024 act_bw=6 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=2048 --q=1024 --sw_bw=6 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,2048,1024,6,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n2048_q1024_actbw6_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,512,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,512,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,512,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,512,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,512,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,512,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,512,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,2048,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,2048,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,2048,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,2048,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,2048,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,2048,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,2048,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,8192,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw1_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,8192,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,8192,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,8192,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,8192,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,8192,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw1_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=1..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=1 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,8192,12,1,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw1_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,512,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,512,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,512,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,512,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,512,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,512,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,512,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,2048,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,2048,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,2048,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,2048,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,2048,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,2048,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,2048,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,8192,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw2_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,8192,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,8192,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,8192,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,8192,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,8192,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw2_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=2..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=2 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,8192,12,2,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw2_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,512,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,512,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,512,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,512,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,512,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,512,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,512,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,2048,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,2048,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,2048,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,2048,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,2048,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,2048,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,2048,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,8192,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,8192,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,8192,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,8192,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,8192,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,8192,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,8192,12,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,768,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,768,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,768,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,768,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,768,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,768,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=768 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=768 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,768,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n768_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q512_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q512_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=512 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=512 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,512,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q512_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2048_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2048_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=2048 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=2048 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,2048,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q2048_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,512,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q8192_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=512 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,512,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=512 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=512 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,512,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=512 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=512 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,512,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=512 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=512 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,512,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,512,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q8192_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=512 q=8192 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=512 --q=8192 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,512,8192,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n512_q8192_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,64,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,64,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=64 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=64 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,64,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=64 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=64 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,64,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=64 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=64 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,64,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,64,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=64 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=64 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,64,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n64_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,256,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw6_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw6_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=8 weight_bw=6..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=8 --csd_len=6 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,8,6,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw8_weightbw6_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=256 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=256 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,256,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q256_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=1024 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=1024 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,1024,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q1024_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=4096 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=4096 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,4096,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q4096_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,3072,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw5_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,3072,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,3072,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,3072,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,3072,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,3072,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw5_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=3072 q=16384 act_bw=6 weight_bw=5..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=3072 --q=16384 --sw_bw=6 --csd_len=5 --dram_intvl=3 --output=gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,3072,16384,6,5,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n3072_q16384_actbw6_weightbw5_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=256 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=256 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,256,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q256_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=1024 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=1024 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,1024,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q1024_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=4096 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=4096 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,4096,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q4096_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,256,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw4_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,256,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,256,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,256,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,256,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,256,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw4_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=256 q=16384 act_bw=6 weight_bw=4..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=256 --q=16384 --sw_bw=6 --csd_len=4 --dram_intvl=3 --output=gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,256,16384,6,4,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n256_q16384_actbw6_weightbw4_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,256,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,1024,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,4096,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw7_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw7_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=8 weight_bw=7..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=8 --csd_len=7 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,16384,8,7,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw8_weightbw7_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=256 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=256 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,256,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q256_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=1024 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=1024 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,1024,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q1024_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=4096 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=4096 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,4096,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q4096_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=2

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU2_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU2_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536 2 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "2,8192,1536,64,16,384,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU2_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw12_weightbw8_PU2_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768 4 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "4,2048,768,64,16,384,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=384 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR2048_WORD384 GEMM m=16 n=384 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR2048_WORD384 --m=16 --n=384 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384 4 64 2048 384 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0 | awk '{print $1}')
    echo "4,2048,384,64,16,384,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR2048_WORD384.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR2048_WORD384.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=768 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD768 GEMM m=16 n=384 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD768 --m=16 --n=384 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768 4 64 8192 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0 | awk '{print $1}')
    echo "4,8192,768,64,16,384,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=2048, WORD_BITS=768 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR2048_WORD768 GEMM m=16 n=384 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR2048_WORD768 --m=16 --n=384 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768 8 64 2048 768 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0 | awk '{print $1}')
    echo "8,2048,768,64,16,384,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR2048_WORD768.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR2048_WORD768.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=4

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU4_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU4_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536 4 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "4,8192,1536,64,16,384,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU4_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw12_weightbw8_PU4_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done

# Run benchmark for VWR_BITS=8192, WORD_BITS=1536 and NUM_PU=8

(
# Skip if the simulation results are already cached
if [ ! -f "$INPUTS_DIR//recording/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536_0_cp.csv" ]; then
    echo "Running PU8_IB64_VWR8192_WORD1536 GEMM m=16 n=384 q=16384 act_bw=12 weight_bw=8..."
    bin/gen_gemm_assembly_PU8_IB64_VWR8192_WORD1536 --m=16 --n=384 --q=16384 --sw_bw=12 --csd_len=8 --dram_intvl=3 --output=gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536
    ./assembly2sc_conf.sh gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536 8 64 8192 1536 1
    CYCLES=$( tail -n 1 $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0 | awk '{print $1}')
    echo "8,8192,1536,64,16,384,16384,12,8,$CYCLES" >> $SIDEDRAM_HOME/stats/cycles_bench_PU8_IB64_VWR8192_WORD1536.csv
    rm $INPUTS_DIR//SystemC/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.sci0
    rm $INPUTS_DIR//results/gemm_m16_n384_q16384_actbw12_weightbw8_PU8_IB64_VWR8192_WORD1536.results
fi
) &
sleep 1
# Allow only MAX_JOBS jobs to run at a time
if [[ $(jobs -r -p | wc -l) -ge $MAX_JOBS ]]; then
    wait -n
fi
while [ $(du -s $INPUTS_DIR/ | awk '{print $1}') -gt 80000000 ]; do
    wait -n
done
wait
echo "Done"
